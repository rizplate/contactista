"""Initial revision

Revision ID: ed99772734e1
Revises:
Create Date: 2017-08-01 12:48:40.754913

"""
import os
import json
from alembic import op
import sqlalchemy as sa
from sqlalchemy.schema import Sequence, CreateSequence, DropSequence


# revision identifiers, used by Alembic.
revision = 'ed99772734e1'
down_revision = None
branch_labels = ('default',)
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pronouns_table = op.create_table('pronouns',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('subject_pronoun', sa.String(length=50), nullable=False),
    sa.Column('object_pronoun', sa.String(length=50), nullable=False),
    sa.Column('possessive_determiner', sa.String(length=50), nullable=False),
    sa.Column('possessive_pronoun', sa.String(length=50), nullable=False),
    sa.Column('reflexive_pronoun', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    role_table = op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('contact',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('notes_format', sa.String(length=20), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roles_users',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    )
    op.create_table('contact_email',
    sa.Column('contact_id', sa.Integer(), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('email', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.PrimaryKeyConstraint('contact_id', 'category')
    )
    op.execute(CreateSequence(Sequence('contact_email_position')))
    op.create_table('contact_name',
    sa.Column('contact_id', sa.Integer(), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.PrimaryKeyConstraint('contact_id', 'category')
    )
    op.execute(CreateSequence(Sequence('contact_name_position')))
    op.create_table('contact_pronouns',
    sa.Column('contact_id', sa.Integer(), nullable=False),
    sa.Column('pronouns_id', sa.Integer(), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.ForeignKeyConstraint(['pronouns_id'], ['pronouns.id'], ),
    sa.PrimaryKeyConstraint('contact_id', 'pronouns_id')
    )
    op.execute(CreateSequence(Sequence('contact_pronouns_position')))
    # ### end Alembic commands ###


    # Seed database with default data
    op.bulk_insert(role_table, rows=[
        {"name": "superuser", "description": "Unlimited access"},
    ])

    pronouns_fixture_path = os.path.join(
        os.path.dirname(os.path.dirname(__file__)),
        "fixtures",
        "pronouns.json",
    )
    with open(pronouns_fixture_path) as f:
        pronouns_list = json.load(f)

    pronouns_objs = [{
        "subject_pronoun": line[0],
        "object_pronoun": line[1],
        "possessive_determiner": line[2],
        "possessive_pronoun": line[3],
        "reflexive_pronoun": line[4],
    } for line in pronouns_list]

    op.bulk_insert(pronouns_table, rows=pronouns_objs)


def downgrade():
    for seqname in ('contact_pronouns_position', 'contact_name_position',
                    'contact_email_position',
        ):
        op.execute(DropSequence(Sequence(seqname)))
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('contact_pronouns')
    op.drop_table('contact_name')
    op.drop_table('contact_email')
    op.drop_table('roles_users')
    op.drop_table('contact')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('pronouns')
    # ### end Alembic commands ###
