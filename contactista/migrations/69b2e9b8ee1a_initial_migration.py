"""Initial migration

Revision ID: 69b2e9b8ee1a
Revises:
Create Date: 2017-09-15 16:52:00.767224

"""
import os
import json
from alembic import op
import sqlalchemy as sa
from sqlalchemy.schema import Sequence, CreateSequence, DropSequence
from sqlalchemy_utils import ColorType


# revision identifiers, used by Alembic.
revision = '69b2e9b8ee1a'
down_revision = None
branch_labels = ('default',)
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pronouns_table = op.create_table('pronouns',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('subject', sa.String(length=50), nullable=False),
        sa.Column('object', sa.String(length=50), nullable=False),
        sa.Column('possessive_determiner', sa.String(length=50), nullable=False),
        sa.Column('possessive', sa.String(length=50), nullable=False),
        sa.Column('reflexive', sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    role_table = op.create_table('role',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=80), nullable=False),
        sa.Column('description', sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_table('user',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=255), nullable=False),
        sa.Column('password', sa.String(length=255), nullable=True),
        sa.Column('active', sa.Boolean(), nullable=True),
        sa.Column('confirmed_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('contact',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('note', sa.Text(), nullable=True),
        sa.Column('note_format', sa.String(length=20), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roles_users',
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('role_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    )
    op.create_table('tag',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=80), nullable=False),
        sa.Column('color', ColorType(length=20), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'name')
    )
    op.create_table('contact_email',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('contact_id', sa.Integer(), nullable=False),
        sa.Column('category', sa.String(length=50), nullable=True),
        sa.Column('position', sa.Integer(), nullable=False),
        sa.Column('email', sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('contact_name',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('contact_id', sa.Integer(), nullable=True),
        sa.Column('category', sa.String(length=50), nullable=True),
        sa.Column('position', sa.Integer(), nullable=False),
        sa.Column('name', sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('contact_pronouns',
        sa.Column('contact_id', sa.Integer(), nullable=False),
        sa.Column('pronouns_id', sa.Integer(), nullable=False),
        sa.Column('position', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
        sa.ForeignKeyConstraint(['pronouns_id'], ['pronouns.id'], ),
        sa.PrimaryKeyConstraint('contact_id', 'pronouns_id')
    )
    op.create_table('contact_tag',
        sa.Column('contact_id', sa.Integer(), nullable=False),
        sa.Column('tag_id', sa.Integer(), nullable=False),
        sa.Column('position', sa.Integer(), nullable=False),
        sa.Column('note', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
        sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
        sa.PrimaryKeyConstraint('contact_id', 'tag_id')
    )
    # ### end Alembic commands ###
    create_sequences()
    seed_data(role_table, pronouns_table)


def downgrade():
    drop_sequences()
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('contact_tag')
    op.drop_table('contact_pronouns')
    op.drop_table('contact_name')
    op.drop_table('contact_email')
    op.drop_table('tag')
    op.drop_table('roles_users')
    op.drop_table('contact')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('pronouns')
    # ### end Alembic commands ###


def seed_data(role_table, pronouns_table):
    "Seed database with default data"
    op.bulk_insert(role_table, rows=[
        {"name": "superuser", "description": "Unlimited access"},
    ])

    pronouns_fixture_path = os.path.join(
        os.path.dirname(os.path.dirname(__file__)),
        "fixtures",
        "pronouns.json",
    )
    with open(pronouns_fixture_path) as f:
        pronouns_list = json.load(f)

    pronouns_objs = [{
        "subject": line[0],
        "object": line[1],
        "possessive_determiner": line[2],
        "possessive": line[3],
        "reflexive": line[4],
    } for line in pronouns_list]

    op.bulk_insert(pronouns_table, rows=pronouns_objs)


POSITION_TABLE_NAMES = (
    'contact_tag', 'contact_name', 'contact_email', 'contact_pronouns',
)


def create_sequences():
    for table_name in POSITION_TABLE_NAMES:
        seq_name = "{table}_position".format(table=table_name)
        op.execute(CreateSequence(Sequence(seq_name)))


def drop_sequences():
    for table_name in POSITION_TABLE_NAMES:
        seq_name = "{table}_position".format(table=table_name)
        op.execute(DropSequence(Sequence(seq_name)))
